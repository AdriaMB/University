#BlueJ class context
comment0.target=MunicipalityNetGraph
comment0.text=\ MunicipalityNetGraph\:\ labelled\ graph\ that\ represents\ an\r\n\ \ intercity\ electric\ grid\ with...\r\n\ \ A\ set\ of\ vertices\ labelled\ with\ the\ names\ of\ the\r\n\ \ municipalities\ in\ the\ network.\r\n\ \ A\ set\ of\ edges\ labelled\ with\ the\ cost\ in\ millions\ of\ euros\r\n\ \ required\ to\ refurbish\ the\ connection\ between\ each\ pair\r\n\ \ of\ municipalities\ of\ the\ network\ (vertices).\r\n\r\n\ @version\ (Curso\ 2022/23)\r\n
comment1.params=filePrefix
comment1.target=MunicipalityNetGraph(java.lang.String)
comment1.text=\ Builds\ the\ graph\ that\ represents\ an\ intercity\ electrical\ network\r\n\ \ as\ an\ UndirectedGgraph,\ from\ the\ data\ contained\ in\ two\ text\ files\r\n\ \ whose\ names\ start\ with\ the\ same\ given\ prefix\ (filePrefix)\:\ one\ contains\r\n\ \ the\ municipalities\ that\ make\ up\ the\ network,\ and\ another\ the\ electrical\r\n\ \ lines\ that\ connect\ them,\ including\ the\ cost\ to\ refurbish\ them.\r\n\r\n\ \ At\ the\ same\ time\ that\ the\ graph\ is\ built,\ the\ two\ maps\ are\ populated,\r\n\ \ using\ efficiently\ HashTables.\r\n
comment2.params=filePrefix
comment2.target=void\ loadEdges(java.lang.String)
comment2.text=\r\n\ Adds\ to\ the\ graph\ the\ weighted\ edges\ found\ in\ the\ data\ file\r\n\ that\ contains\ the\ electrical\ lines\ and\ their\ refurbishing\ costs.\r\n\ To\ do\ so,\ it\ uses\ the\ municipalitiesToVertices\ Map.\r\n
comment3.params=
comment3.target=int\ numVertices()
comment3.text=\ Returns\ the\ number\ of\ municipalities\ in\ an\ electrical\ network,\r\n\ \ or\ the\ number\ of\ vertices\ in\ the\ graph\ representing\ it.\r\n
comment4.params=
comment4.target=int\ numEdges()
comment4.text=\ Returns\ the\ number\ of\ electrical\ lines\ of\ a\ network,\ or\ the\r\n\ \ number\ of\ edges\ in\ the\ graph\ representing\ it.\r\n
comment5.params=m
comment5.target=int\ getVertex(Municipality)
comment5.text=\ Returns\ the\ vertex\ associated\ to\ the\ municipalities\ of\r\n\ \ an\ electrical\ network,\ -1\ if\ m\ does\ not\ appear\ in\ it.\r\n\r\n\ \ A\ getter\ method\ of\ the\ municipalitiesToVertices\ Map\:\r\n\ @param\ m\ A\ municipality\ in\ the\ network\r\n
comment6.params=v
comment6.target=Municipality\ getMunicipality(int)
comment6.text=\ Returns\ the\ municipality\ of\ an\ electrical\ network\ associated\r\n\ \ to\ vertex\ v\ in\ the\ graph\ representing\ it,\ or\ null\ if\ v\ is\r\n\ \ outside\ the\ interval\ [0,\ numMunicipalities()\ -\ 1].\r\n\r\n\ A\ getter\ method\ of\ the\ verticesToMunicipalities\ Map\:\r\n\ @param\ v\ A\ vertex\ in\ the\ network's\ graph\r\n
comment7.params=v
comment7.target=libraries.dataStructures.models.ListPOI\ adjacentTo(int)
comment7.text=\ Returns\ the\ list\ of\ Adjacents\ to\ a\ vertex\ v,\ or\ null\ if\r\n\ \ v\ is\ not\ in\ the\ interval\ [0,\ numMunicipality()\ -\ 1].\r\n\ \ @param\ v\ Vertex\ in\ the\ graph\r\n
comment8.params=
comment8.target=double\ createKruskalAdjacents()
comment8.text=\ If\ it\ exists,\ computes\ the\ electrical\ lines\ of\ a\ minimal\r\n\ \ cost\ subnet\ for\ an\ intercity\ electrical\ grid,\ i.e.,\ the\r\n\ \ edges\ that\ define\ a\ Minimum\ Spanning\ Tree\ of\ the\ graph\r\n\ \ that\ represents\ the\ network,\ and\ returns\ its\ cost.\r\n\ \ Additionally,\ it\ creates\ and\ populates\ the\ kruskalAdjacents\r\n\ \ Map,\ which\ links\ each\ Municipality\ in\ the\ network\ to\ all\r\n\ \ its\ Adjacents\ in\ said\ Tree.\r\n\r\n\ If\ no\ minimal\ cost\ subnet\ exists,\ it\ returns\ -1.0;\r\n
numComments=9
